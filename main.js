if ('scrollRestoration' in history) {
  history.scrollRestoration = 'manual';
}

document.addEventListener("DOMContentLoaded", () => {
  const items = document.querySelectorAll("#services-what .service-item");
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add("visible");
        }, index * 600); // –ø–æ —á–µ—Ä–∑—ñ
        observer.unobserve(entry.target); // –æ–¥–∏–Ω —Ä–∞–∑
      }
    });
  }, { threshold: 0.3 });

  items.forEach(item => observer.observe(item));
});

// –ê–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è services-tasks (fade-in —É—Å—ñ—Ö –æ–¥–Ω–æ—á–∞—Å–Ω–æ)
const tasksObserver = new IntersectionObserver((entries, observer) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const items = entry.target.querySelectorAll(".service-item");
      items.forEach(item => item.classList.add("visible"));
      observer.unobserve(entry.target); // –ø–µ—Ä–µ—Å—Ç–∞—î–º–æ —Å–ª—É—Ö–∞—Ç–∏ –ø—ñ—Å–ª—è –ø–æ—è–≤–∏
    }
  });
}, { threshold: 0.3 });

const tasksSection = document.querySelector("#services-tasks");
if (tasksSection) {
  tasksObserver.observe(tasksSection);
}

document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function(e) {
    e.preventDefault();

    const targetId = this.getAttribute('href');
    const target = document.querySelector(targetId);
    const headerOffset = document.querySelector('header').offsetHeight; // –≤–∏—Å–æ—Ç–∞ —Ö–µ–¥–µ—Ä–∞
    const elementPosition = target.getBoundingClientRect().top + window.scrollY;
    const offsetPosition = elementPosition - headerOffset;

    window.scrollTo({
      top: offsetPosition,
      behavior: 'smooth'
    });
  });
});

document.addEventListener("DOMContentLoaded", function() {
  const element = document.querySelector(".implementation-text");
  const text = element.textContent.trim();
  element.textContent = ""; // –æ—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç

  let i = 0;
  let hasPlayed = false; // —â–æ–± –µ—Ñ–µ–∫—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–≤—Å—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É

  function typeWriter() {
    if (i < text.length) {
      element.textContent += text.charAt(i);
      i++;
      setTimeout(typeWriter, 50); // —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–Ω—è
    }
  }

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting && !hasPlayed) {
        hasPlayed = true;
        typeWriter();
      }
    });
  }, { threshold: 0.6 }); // 0.6 = —Å–ø—Ä–∞—Ü—é—î, –∫–æ–ª–∏ –≤–∏–¥–Ω–æ 60% –µ–ª–µ–º–µ–Ω—Ç–∞

  observer.observe(element);
});

document.addEventListener("DOMContentLoaded", () => {
  const items = document.querySelectorAll(".super-item");
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
      if (entry.isIntersecting) {
        setTimeout(() => {
          entry.target.classList.add("visible");
        }, index * 600); // –ø–æ —á–µ—Ä–∑—ñ
        observer.unobserve(entry.target); // –æ–¥–∏–Ω —Ä–∞–∑
      }
    });
  }, { threshold: 0.3 });

  items.forEach(item => observer.observe(item));
});

const cards = document.querySelectorAll('.case-card');
const nextBtns = document.querySelectorAll('.next-btn');
let currentIndex = 0;

function showCard(index) {
  cards.forEach((card, i) => {
    card.classList.toggle('active', i === index);
  });
}

nextBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % cards.length; // —Ü–∏–∫–ª—ñ—á–Ω–æ
    showCard(currentIndex);
  });
});

showCard(currentIndex);

window.addEventListener("load", function() {
  let loader = document.getElementById("loader");
  let content = document.getElementById("content");

  loader.style.display = "none";  // —Ö–æ–≤–∞—î–º–æ –ª–æ–∞–¥–µ—Ä
  content.style.display = "block"; // –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
});

document.addEventListener("DOMContentLoaded", () => {
  const implItems = document.querySelectorAll(".impl-item");

  const observer = new IntersectionObserver((entries, obs) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add("show");
        obs.unobserve(entry.target); // –∞–Ω—ñ–º–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
      }
    });
  }, {
    threshold: 0.2 // 20% –±–ª–æ–∫—É –≤–∏–¥–Ω–æ ‚Üí –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è
  });

  implItems.forEach(item => observer.observe(item));
});

document.addEventListener("DOMContentLoaded", function() {
  const element = document.querySelector(".supervisor-text");
  const text = element.textContent.trim();
  element.textContent = ""; // –æ—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç

  let i = 0;
  let hasPlayed = false; // —â–æ–± –µ—Ñ–µ–∫—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–≤—Å—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É

  function typeWriter() {
    if (i < text.length) {
      element.textContent += text.charAt(i);
      i++;
      setTimeout(typeWriter, 50); // —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–Ω—è
    }
  }

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting && !hasPlayed) {
        hasPlayed = true;
        typeWriter();
      }
    });
  }, { threshold: 0.6 }); // 0.6 = —Å–ø—Ä–∞—Ü—é—î, –∫–æ–ª–∏ –≤–∏–¥–Ω–æ 60% –µ–ª–µ–º–µ–Ω—Ç–∞

  observer.observe(element);
});

document.addEventListener("DOMContentLoaded", function () {
  const cards = document.querySelectorAll(".case-card");
  let current = 0;

  function showNextCase() {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –∫–µ–π—Å–∏
    cards.forEach(card => card.classList.remove("active"));

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π
    cards[current].classList.add("active");

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
    current = (current + 1) % cards.length;
  }

  // –ó–∞–ø—É—Å–∫–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
  setInterval(showNextCase, 15000);

  // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π –æ–¥—Ä–∞–∑—É
  showNextCase();
});

document.addEventListener("DOMContentLoaded", () => {
  const items = document.querySelectorAll(".support-item");

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        items.forEach((item, index) => {
          setTimeout(() => {
            item.classList.add("visible");
          }, index * 400); // –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—è–≤–∞–º–∏
        });
        observer.disconnect(); // –∑—É–ø–∏–Ω—è—î–º–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É
      }
    });
  }, { threshold: 0.3 });

  if (items.length > 0) {
    observer.observe(items[0].parentElement); // —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
  }
});

window.addEventListener("scroll", function() {
  const header = document.querySelector("header");
  if (window.scrollY > 50) {
    header.classList.add("shrink");
  } else {
    header.classList.remove("shrink");
  }
});

// –û—Ç—Ä–∏–º—É—î–º–æ –∫–Ω–æ–ø–∫—É
const scrollTopBtn = document.getElementById("scrollTopBtn");

// –ü–æ–∫–∞–∑—É—î–º–æ/—Ö–æ–≤–∞—î–º–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
window.onscroll = function () {
  if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
    scrollTopBtn.style.display = "block";
  } else {
    scrollTopBtn.style.display = "none";
  }
};

// –ü—Ä–∏ –∫–ª—ñ–∫—É ‚Äî –ø–ª–∞–≤–Ω–∏–π —Å–∫—Ä–æ–ª —É–≥–æ—Ä—É
scrollTopBtn.addEventListener("click", () => {
  window.scrollTo({
    top: 0,
    behavior: "smooth"
  });
});

// ===== YouTube Video Control =====

// 1. –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ YouTube IFrame API
const tag = document.createElement("script");
tag.src = "https://www.youtube.com/iframe_api";
document.head.appendChild(tag);

let player;

// 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–µ—î—Ä–∞ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API
function onYouTubeIframeAPIReady() {
  console.log("‚úÖ YouTube API Ready");

  player = new YT.Player("myVideo", {
    events: {
      onReady: () => {
        console.log("‚ñ∂Ô∏è Player Ready");
        setupObserver();
      },
      onStateChange: onPlayerStateChange
    }
  });
}

// 3. IntersectionObserver ‚Üí –∑–∞–ø—É—Å–∫ —ñ –ø–∞—É–∑–∞ –≤—ñ–¥–µ–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ
function setupObserver() {
  const videoSection = document.querySelector(".video-section");
  console.log("üëÄ Observer attached to:", videoSection);

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          console.log("üé¨ Section visible ‚Üí play");
          player.playVideo();
        } else {
          console.log("‚è∏Ô∏è Section hidden ‚Üí pause");
          player.pauseVideo();
        }
      });
    },
    { threshold: 0.5 } // —Ö–æ—á–∞ –± 50% —Å–µ–∫—Ü—ñ—ó –º–∞—î –±—É—Ç–∏ –≤–∏–¥–Ω–æ
  );

  observer.observe(videoSection);
}

// 4. –ü–æ–∫–∞–∑ –æ–≤–µ—Ä–ª–µ—é –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
function onPlayerStateChange(event) {
  const overlay = document.getElementById("videoOverlay");

  if (event.data === YT.PlayerState.ENDED) {
    console.log("üèÅ Video ended ‚Üí show overlay");
    overlay.style.display = "flex";
  }
}

// 5. –ö–ª—ñ–∫ –ø–æ –æ–≤–µ—Ä–ª–µ—é ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ñ–¥–µ–æ
document.getElementById("videoOverlay").addEventListener("click", () => {
  console.log("üîÅ Overlay clicked ‚Üí restart video");
  player.seekTo(0);
  player.playVideo();
  document.getElementById("videoOverlay").style.display = "none";
});
